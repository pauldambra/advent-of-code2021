from unittest import TestCase


def tick(fish: list[int]) -> list[int]:
    next_tick = []
    new_fish = []
    for f in fish:
        if f == 0:
            next_tick.append(6)
            new_fish.append(8)
        else:
            next_tick.append(f - 1)

    return next_tick + new_fish


class TestLanternfish(TestCase):
    def test_single_fish(self):
        fish = [3]
        fish = tick(fish)
        assert fish == [2]

        fish = tick(tick(fish))
        assert fish == [0]

        fish = tick(fish)
        assert fish == [6, 8]

    def test_a_list_of_fish(self):
        fish = [3, 4, 3, 1, 2]
        fish = tick(tick(fish))  # after 2 days

        assert fish == [1, 2, 1, 6, 0, 8]

        fish = tick(tick(fish))
        assert fish == [6, 0, 6, 4, 5, 6, 7, 8, 8]  # after 4 days

        fish = tick(tick(fish))
        assert fish == [4, 5, 4, 2, 3, 4, 5, 6, 6, 7]  # after 6 days

        fish = tick(tick(fish))
        assert fish == [2, 3, 2, 0, 1, 2, 3, 4, 4, 5]  # after 8 days

        fish = tick(tick(fish))
        assert fish == [0, 1, 0, 5, 6, 0, 1, 2, 2, 3, 7, 8]  # after 10 days

        fish = [3, 4, 3, 1, 2]
        for n in range(0, 18):
            fish = tick(fish)

        assert len(fish) == 26

        fish = [3, 4, 3, 1, 2]
        for n in range(0, 80):
            fish = tick(fish)

        assert len(fish) == 5934

    def test_puzzle_input(self):
        fish = [
            5,
            1,
            5,
            3,
            2,
            2,
            3,
            1,
            1,
            4,
            2,
            4,
            1,
            2,
            1,
            4,
            1,
            1,
            5,
            3,
            5,
            1,
            5,
            3,
            1,
            2,
            4,
            4,
            1,
            1,
            3,
            1,
            1,
            3,
            1,
            1,
            5,
            1,
            5,
            4,
            5,
            4,
            5,
            1,
            3,
            2,
            4,
            3,
            5,
            3,
            5,
            4,
            3,
            1,
            4,
            3,
            1,
            1,
            1,
            4,
            5,
            1,
            1,
            1,
            2,
            1,
            2,
            1,
            1,
            4,
            1,
            4,
            1,
            1,
            3,
            3,
            2,
            2,
            4,
            2,
            1,
            1,
            5,
            3,
            1,
            3,
            1,
            1,
            4,
            3,
            3,
            3,
            1,
            5,
            2,
            3,
            1,
            3,
            1,
            5,
            2,
            2,
            1,
            2,
            1,
            1,
            1,
            3,
            4,
            1,
            1,
            1,
            5,
            4,
            1,
            1,
            1,
            4,
            4,
            2,
            1,
            5,
            4,
            3,
            1,
            2,
            5,
            1,
            1,
            1,
            1,
            2,
            1,
            5,
            5,
            1,
            1,
            1,
            1,
            3,
            1,
            4,
            1,
            3,
            1,
            5,
            1,
            1,
            1,
            5,
            5,
            1,
            4,
            5,
            4,
            5,
            4,
            3,
            3,
            1,
            3,
            1,
            1,
            5,
            5,
            5,
            5,
            1,
            2,
            5,
            4,
            1,
            1,
            1,
            2,
            2,
            1,
            3,
            1,
            1,
            2,
            4,
            2,
            2,
            2,
            1,
            1,
            2,
            2,
            1,
            5,
            2,
            1,
            1,
            2,
            1,
            3,
            1,
            3,
            2,
            2,
            4,
            3,
            1,
            2,
            4,
            5,
            2,
            1,
            4,
            5,
            4,
            2,
            1,
            1,
            1,
            5,
            4,
            1,
            1,
            4,
            1,
            4,
            3,
            1,
            2,
            5,
            2,
            4,
            1,
            1,
            5,
            1,
            5,
            4,
            1,
            1,
            4,
            1,
            1,
            5,
            5,
            1,
            5,
            4,
            2,
            5,
            2,
            5,
            4,
            1,
            1,
            4,
            1,
            2,
            4,
            1,
            2,
            2,
            2,
            1,
            1,
            1,
            5,
            5,
            1,
            2,
            5,
            1,
            3,
            4,
            1,
            1,
            1,
            1,
            5,
            3,
            4,
            1,
            1,
            2,
            1,
            1,
            3,
            5,
            5,
            2,
            3,
            5,
            1,
            1,
            1,
            5,
            4,
            3,
            4,
            2,
            2,
            1,
            3,
        ]

        for n in range(0, 80):
            fish = tick(fish)

        assert len(fish) == 362346
